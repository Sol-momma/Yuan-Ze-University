// Exmaple1 

#include <bits/stdc++.h>

using namespace std;
class Geeks {
public:
	// Function with 1 int parameter
	void func(int x)
	{
		cout << "value of x is " << x << endl;
	}

	// Function with same name but
	// 1 double parameter
	void func(double x)
	{
		cout << "value of x is " << x << endl;
	}

	// Function with same name and
	// 2 int parameters
	void func(int x, int y)
	{
		cout << "value of x and y is " << x << ", " << y
			<< endl;
	}
};

// Driver code
int main()
{
	Geeks obj1;

	// Function being called depends
	// on the parameters passed
	// func() is called with int value
	obj1.func(7);

	// func() is called with double value
	obj1.func(9.132);

	// func() is called with 2 int values
	obj1.func(85, 64);
	return 0;
}

//Exmaple2

#include <iostream>

using namespace std;

class Base {
public:
    virtual void display() {
        cout << "Base class display()" << endl;
    }
};

class Derived : public Base {
public:
    void display() override {
        cout << "Derived class display()" << endl;
    }
};

int main() {
    Base* basePtr = new Derived();
    basePtr->display(); // Output: "Derived class display()"
    delete basePtr;
    return 0;
}


---------------------------------------------------------------------------------------
Example 3

#include <iostream>
using namespace std;

// Base class
class Animal {
public:
    // Virtual function
    virtual void makeSound() {
        cout << "An animal makes a sound" << endl;
    }
};

// Derived class 1
class Dog : public Animal {
public:
    // Override makeSound() for Dog
    void makeSound() override {
        cout << "Dog barks: Woof! Woof!" << endl;
    }
};

// Derived class 2
class Cat : public Animal {
public:
    // Override makeSound() for Cat
    void makeSound() override {
        cout << "Cat meows: Meow! Meow!" << endl;
    }
};

// Derived class 3
class Bird : public Animal {
public:
    // Override makeSound() for Bird
    void makeSound() override {
        cout << "Bird chirps: Chirp! Chirp!" << endl;
    }
};

int main() {
    // Create instances of each animal type
    Animal* myDog = new Dog();
    Animal* myCat = new Cat();
    Animal* myBird = new Bird();

    // Call makeSound() for each animal
    myDog->makeSound();   // Outputs: Dog barks: Woof! Woof!
    myCat->makeSound();   // Outputs: Cat meows: Meow! Meow!
    myBird->makeSound();  // Outputs: Bird chirps: Chirp! Chirp!

    delete myDog;
    delete myCat;
    delete myBird;

    return 0;
}


// Example 4: Function Overloading
#include <iostream>
using namespace std;

class Math {
public:
    int add(int a, int b) {
        return a + b;
    }

    double add(double a, double b) {
        return a + b;
    }
};

int main() {
    Math math;
    cout << math.add(5, 7) << endl;      // calls int add(int, int)
    cout << math.add(3.5, 4.2) << endl;  // calls double add(double, double)
    return 0;
}

// Example 5: Virtual Functions
#include <iostream>
using namespace std;

class Animal {
public:
    virtual void sound() {
        cout << "Animal makes a sound" << endl;
    }
};

class Dog : public Animal {
public:
    void sound() override {
        cout << "Dog barks" << endl;
    }
};

int main() {
    Dog dog;
    dog.sound();  // Output: Dog barks
    return 0;
}

// Example 6: Abstract Classes and Pure Virtual Functions
#include <iostream>
using namespace std;

class Shape {
public:
    virtual void draw() = 0; // Pure virtual function
};

class Circle : public Shape {
public:
    void draw() override {
        cout << "Drawing Circle" << endl;
    }
};

class Square : public Shape {
public:
    void draw() override {
        cout << "Drawing Square" << endl;
    }
};

int main() {
    Circle circle;
    circle.draw();  // Output: Drawing Circle
    return 0;
}

// Example 7: Polymorphic Containers
#include <iostream>
#include <vector>
using namespace std;

class Shape {
public:
    virtual void draw() = 0;
};

class Circle : public Shape {
public:
    void draw() override {
        cout << "Drawing Circle" << endl;
    }
};

class Square : public Shape {
public:
    void draw() override {
        cout << "Drawing Square" << endl;
    }
};

int main() {
    vector<Shape*> shapes;
    shapes.push_back(new Circle());
    shapes.push_back(new Square());

    for (Shape* shape : shapes) {
        shape->draw();
    }

    for (Shape* shape : shapes) {
        delete shape;
    }

    return 0;
}

// Example 8: Template Functions
#include <iostream>
using namespace std;

template<typename T>
void print(T value) {
    cout << value << endl;
}

int main() {
    print(5);               // Output: 5
    return 0;
}

// Example 9: Function Pointers
#include <iostream>
using namespace std;

void add(int a, int b) {
    cout << "Sum: " << a + b << endl;
}

int main() {
    void (*operation)(int, int);
    operation = &add;
    operation(5, 3);        // Output: Sum: 8
    return 0;
}

// Example 10: Operator Overloading
#include <iostream>
using namespace std;

class Complex {
private:
    double real;
    double imaginary;
public:
    Complex(double r, double i) : real(r), imaginary(i) {}

    Complex operator+(const Complex& other) {
        return Complex(real + other.real, imaginary + other.imaginary);
    }

    friend ostream& operator<<(ostream& os, const Complex& c) {
        os << c.real << " + " << c.imaginary << "i";
        return os;
    }
};

int main() {
    Complex c1(2, 3);
    Complex c2(4, 5);
    Complex c3 = c1 + c2;
    cout << c3;  // Output: 6 + 8i
    return 0;
}


Exmaple 11:

#include <iostream>
using namespace std;

// Base class
class Animal {
public:
    // Virtual function
    virtual void speak() {
        cout << "Animal speaks!" << endl;
    }
};

// Derived class
class Dog : public Animal {
public:
    // Overriding the virtual function
    void speak() override {
        cout << "Dog barks!" << endl;
    }
};

// Another derived class
class Cat : public Animal {
public:
    // Overriding the virtual function
    void speak() override {
        cout << "Cat meows!" << endl;
    }
};

int main() {
    // Pointer to base class
    Animal* animalPtr;

    // Creating objects of derived classes
    Dog dog;
    Cat cat;

    // Demonstrating runtime polymorphism
    animalPtr = &dog;
    animalPtr->speak();  // Output: Dog barks!

    animalPtr = &cat;
    animalPtr->speak();  // Output: Cat meows!

    return 0;
}




CPE Problem1:

#include <iostream>
#include <string>
using namespace std;

bool isPalindrome(const string &str) {
    int left = 0;
    int right = str.length() - 1;

    while (left < right) {
        // Skip non-alphanumeric characters
        if (!isalnum(str[left])) {
            left++;
        } else if (!isalnum(str[right])) {
            right--;
        } else if (tolower(str[left]) != tolower(str[right])) {
            return false;  // If characters don't match, it's not a palindrome
        } else {
            left++;
            right--;
        }
    }
    return true;
}

int main() {
    string str;
    getline(cin, str); // Read a line of input

    if (isPalindrome(str)) {
        cout << "YES" << endl;
    } else {
        cout << "NO" << endl;
    }

    return 0;
}