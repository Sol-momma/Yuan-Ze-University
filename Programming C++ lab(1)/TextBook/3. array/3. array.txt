
1. Basic Array Declaration and Initialization

#include <iostream>
using namespace std;

int main() {
    int numbers[5] = {1, 2, 3, 4, 5};
    for (int i = 0; i < 5; i++) {
        cout << numbers[i] << " ";
    }
    return 0;
}


2. Array without Initialization

#include <iostream>
using namespace std;

int main() {
    int numbers[5]; // Uninitialized
    numbers[0] = 10;
    numbers[1] = 20;
    numbers[2] = 30;
    numbers[3] = 40;
    numbers[4] = 50;
    
    for (int i = 0; i < 5; i++) {
        cout << numbers[i] << " ";
    }
    return 0;
}


3. Array of Characters (C-Style String)

#include <iostream>
using namespace std;

int main() {
    char word[6] = "Hello"; // Note: Need extra space for '\0'
    cout << word << endl;
    return 0;
}


4. 2D Array Example

#include <iostream>
using namespace std;

int main() {
    int matrix[3][3] = { 
        {1, 2, 3}, 
        {4, 5, 6}, 
        {7, 8, 9} 
    };
    
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }
    return 0;
}


5. Array Size Calculation

#include <iostream>
using namespace std;

int main() {
    int arr[] = {5, 10, 15, 20, 25};
    int size = sizeof(arr) / sizeof(arr[0]);
    
    cout << "Array size: " << size << endl;
    return 0;
}
```

6. Array Initialization with All Zeros

#include <iostream>
using namespace std;

int main() {
    int arr[10] = {0}; // Initializes all elements to zero
    
    for (int i = 0; i < 10; i++) {
        cout << arr[i] << " ";
    }
    return 0;
}


7. Passing Array to Function

#include <iostream>
using namespace std;

void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

int main() {
    int arr[5] = {10, 20, 30, 40, 50};
    printArray(arr, 5);
    return 0;
}


8. Multidimensional Array Example

#include <iostream>
using namespace std;

int main() {
    int arr[2][3] = { 
        {1, 2, 3}, 
        {4, 5, 6} 
    };
    
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 3; j++) {
            cout << arr[i][j] << " ";
        }
        cout << endl;
    }
    return 0;
}


9. Array of Strings

#include <iostream>
using namespace std;

int main() {
    string fruits[] = {"Apple", "Banana", "Cherry"};
    
    for (int i = 0; i < 3; i++) {
        cout << fruits[i] << endl;
    }
    return 0;
}


10. Array with Range-based for Loop

#include <iostream>
using namespace std;

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    
    for (int element : arr) {
        cout << element << " ";
    }
    return 0;
}

11. Sorting array

#include <iostream>
using namespace std;

int main() {
    // Declare and initialize the array with a fixed size
    int arr[] = {5, 3, 8, 4, 2};
    int n = 5;  // Manually specify the size of the array

    // Display the unsorted array
    cout << "Unsorted array: ";
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";
    cout << endl;

    // Bubble Sort algorithm
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                // Swap the elements
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }

    // Display the sorted array
    cout << "Sorted array: ";
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";
    cout << endl;

    return 0;
}


12.

#include <iostream>
using namespace std;

// Define the size of the matrices
const int ROWS = 2;
const int COLS = 2;

// Function to print a matrix
void printMatrix(int matrix[ROWS][COLS]) {
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }
}

// Function to add two matrices
void addMatrices(int matrixA[ROWS][COLS], int matrixB[ROWS][COLS], int result[ROWS][COLS]) {
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            result[i][j] = matrixA[i][j] + matrixB[i][j];
        }
    }
}

// Function to subtract two matrices
void subtractMatrices(int matrixA[ROWS][COLS], int matrixB[ROWS][COLS], int result[ROWS][COLS]) {
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            result[i][j] = matrixA[i][j] - matrixB[i][j];
        }
    }
}

// Function to multiply two matrices
void multiplyMatrices(int matrixA[ROWS][COLS], int matrixB[ROWS][COLS], int result[ROWS][COLS]) {
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            result[i][j] = 0;  // Initialize result matrix
            for (int k = 0; k < COLS; k++) {
                result[i][j] += matrixA[i][k] * matrixB[k][j];
            }
        }
    }
}

int main() {
    // Declare two matrices
    int matrixA[ROWS][COLS] = {{1, 2}, {3, 4}};
    int matrixB[ROWS][COLS] = {{5, 6}, {7, 8}};
    
    // Result matrices for each operation
    int resultAdd[ROWS][COLS];
    int resultSubtract[ROWS][COLS];
    int resultMultiply[ROWS][COLS];
    
    // Perform matrix addition
    addMatrices(matrixA, matrixB, resultAdd);
    cout << "Matrix Addition:" << endl;
    printMatrix(resultAdd);
    
    // Perform matrix subtraction
    subtractMatrices(matrixA, matrixB, resultSubtract);
    cout << "Matrix Subtraction:" << endl;
    printMatrix(resultSubtract);
    
    // Perform matrix multiplication
    multiplyMatrices(matrixA, matrixB, resultMultiply);
    cout << "Matrix Multiplication:" << endl;
    printMatrix(resultMultiply);
    
    return 0;
}


