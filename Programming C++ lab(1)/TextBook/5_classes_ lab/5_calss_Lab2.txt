
1. Simple Class with Getter and Setter Functions
This program demonstrates the creation of a simple class with private data members and public methods for setting and getting values.

#include <iostream>
using namespace std;

class Student {
private:
    string name;
    int age;
    float gpa;

public:
    // Setter methods
    void setName(string n) {
        name = n;
    }

    void setAge(int a) {
        age = a;
    }

    void setGPA(float g) {
        gpa = g;
    }

    // Getter methods
    string getName() {
        return name;
    }

    int getAge() {
        return age;
    }

    float getGPA() {
        return gpa;
    }
};

int main() {
    Student student1;

    // Setting values
    student1.setName("John Doe");
    student1.setAge(20);
    student1.setGPA(3.8);

    // Getting and displaying values
    cout << "Name: " << student1.getName() << endl;
    cout << "Age: " << student1.getAge() << endl;
    cout << "GPA: " << student1.getGPA() << endl;

    return 0;
}

=================================================================================================

2. Constructor and Destructor in Classes

#include <iostream>
using namespace std;

class Book {
private:
    string title;
    string author;

public:
    // Constructor
    Book(string t, string a) {
        title = t;
        author = a;
        cout << "Book created: " << title << " by " << author << endl;
    }

    // Destructor
    ~Book() {
        cout << "Book destroyed: " << title << endl;
    }

    // Display details of the book
    void display() {
        cout << "Title: " << title << ", Author: " << author << endl;
    }
};

int main() {
    // Create objects of Book class
    Book book1("1984", "George Orwell");
    Book book2("The Catcher in the Rye", "J.D. Salinger");

    // Display book details
    book1.display();
    book2.display();

    return 0;
}


=======================================================================================================

3. Using Multiple Objects of a Class

#include <iostream>
using namespace std;

class Employee {
private:
    string name;
    int id;
    double salary;

public:
    // Constructor
    Employee(string n, int i, double s) {
        name = n;
        id = i;
        salary = s;
    }

    // Display details of the employee
    void display() {
        cout << "Name: " << name << ", ID: " << id << ", Salary: $" << salary << endl;
    }
};

int main() {
    // Create multiple Employee objects
    Employee emp1("Alice", 101, 50000);
    Employee emp2("Bob", 102, 60000);
    Employee emp3("Charlie", 103, 55000);

    // Display their details
    emp1.display();
    emp2.display();
    emp3.display();

    return 0;
}


===================================================================================================

4. Class with Parameterized Constructor and Default Constructor

#include <iostream>
using namespace std;

class Rectangle {
private:
    double length;
    double width;

public:
    // Default constructor
    Rectangle() {
        length = 0.0;
        width = 0.0;
    }

    // Parameterized constructor
    Rectangle(double l, double w) {
        length = l;
        width = w;
    }

    // Function to calculate area
    double area() {
        return length * width;
    }

    // Function to display dimensions
    void display() {
        cout << "Length: " << length << ", Width: " << width << endl;
    }
};

int main() {
    // Using default constructor
    Rectangle rect1;
    cout << "Rectangle 1 (Default):" << endl;
    rect1.display();
    cout << "Area: " << rect1.area() << endl;

    // Using parameterized constructor
    Rectangle rect2(5.5, 3.8);
    cout << "Rectangle 2 (Parameterized):" << endl;
    rect2.display();
    cout << "Area: " << rect2.area() << endl;

    return 0;
}


=============================================================================================================

5. Class with Static Member Variables and Functions

#include <iostream>
using namespace std;

class Counter {
private:
    static int count;  // Static member variable

public:
    // Constructor
    Counter() {
        count++;
    }

    // Static function to get the count
    static int getCount() {
        return count;
    }
};

// Initialize static variable
int Counter::count = 0;

int main() {
    Counter c1, c2, c3;  // Creating objects

    // Accessing static member using the class name
    cout << "Total objects created: " << Counter::getCount() << endl;

    return 0;
}

